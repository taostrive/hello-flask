# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application CI bootstrap

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TEST_TAG: hello-flask:test

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # install dev dependencies
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run UT and generate coverage report
      run: |
        pytest tests --doctest-modules --junitxml=junit/test-results-${{ github.run_id }}.xml --cov=app --cov-report=xml --cov-report=html
    - name: Upload UT test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ github.run_id }}
        path: junit/test-results-${{ github.run_id }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Build and scan Dockerfile and container image(using hadolint, dockle and trivy)
      uses: ISID/build-and-scan-image@main
      with:
        # Image name and optionally tag in "name:tag" format
        tag: "${{ env.TEST_TAG }}"
    
        # Path to base directory to run `docker build` command (default ".")
        path: "."
    
        # Path to Dockerfile, which is relative path from "path" parameter (default "Dockerfile")
        dockerfile: Dockerfile
    
        # Enable scanning Dockerfile by hadolint (default "true")
        hadolint-enable: "true"
    
        # Hadolint version.
        hadolint-version: "2.8.0"
    
        # Fail step if rules with a severity above this level are violated (default "info")
        # Acceptable value is one of (error|warning|info|style|ignore|none)
        hadolint-severity: info
    
        # Enable scanning image by dockle (default "true")
        dockle-enable: "true"
    
        # Dockle version.
        dockle-version: "0.4.3"
    
        # Fail step if checkpoints with a severity above this level are violated (default "WARN")
        # Acceptable value is one of (INFO|WARN|FATAL)
        dockle-severity: WARN
    
        # Enable scanning image by trivy (default "true")
        trivy-enable: "false"
    
        # Trivy version.
        trivy-version: "0.23.0"
    
        # Fail step if image has vulnerabilities with a severity same as this level
        # (default "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL")
        # Acceptable value is comma-separated list of (UNKNOWN|LOW|MEDIUM|HIGH|CRITICAL)
        trivy-severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
    
        # Vulnerability types which trivy detect to (default "os,library")
        # Acceptable value is comma-separated list of (os|library)
        trivy-vuln-type: os,library
    
        # Ignore unfixed vulnerabilities (default "false")
        trivy-ignore-unfixed: "false"
    
        # Enable scanning image by snyk (default "false")
        # If enabled, "snyk-token" must be also set.
        snyk-enable: "false"
    
        # Snyk CLI version.
        snyk-version: "1.848.0"
    
        # Snyk API Token (default "")
        # This is necessary if "snyk-enable" is "true".
        snyk-token: ""
    
        # Fail step if image has vulnerabilities with a severity above this level (default "low")
        # Acceptable value is one of (low|medium|high|critical)
        snyk-severity: low
    
        # Exclude base image vulnerabilities (default "false")
        snyk-exclude-base-image-vulns: "false"
    - name: Test built image before push 
      run: |
        docker run -d --name my-hello-flask --network host --rm ${{ env.TEST_TAG }}
        sleep 5
        curl -v http://localhost:5001/ 2>&1 |grep "HTTP/1.1 200 OK"
        if [ $? -eq 0 ];then
          echo "Quick test passed!"
        else
          echo "Quick test failed, please check!"
        fi
        docker stop my-hello-flask

        
